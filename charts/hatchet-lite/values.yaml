
image:
  repository: "ghcr.io/hatchet-dev/hatchet/hatchet-server"
  tag: "v0.1.0-alpha.1"
  pullPolicy: "IfNotPresent"

config:
  # update shared.yaml config here
  shared:
    temporal:
      client:
        enabled: false
  # update server.yaml config here
  server:
    runtime:
      port: 8080
      url: http://localhost:8080
      runBackgroundWorker: true
      runRunnerWorker: false
      runTemporalServer: true
      runStaticFileServer: true
      staticFilePath: /hatchet/static
    auth:
      cookie:
        domain: localhost:8080
        insecure: true
    fileStore:
      kind: local
      local: 
        directory: /hatchet/data/files
    logStore:
      kind: file
      file: 
        directory: /hatchet/data/logs
  # update database.yaml config here
  database:
    kind: sqlite
    autoMigrate: true
    sqlite:
      path: /hatchet/data/hatchet.db
  # update temporal.yaml config here
  temporal:
    sqlLitePath: /hatchet/data/temporal.db
    logLevel: error
  # update background_worker.yaml config here
  background_worker:
    serverURL: http://localhost:8080
    auth:
      cookie:
        domain: http://localhost:8080
        insecure: true
    fileStore:
      kind: local
      local: 
        directory: /hatchet/data/files
    logStore:
      kind: file
      file: 
        directory: /hatchet/data/logs
  runner_worker:
    provisioner:
      kind: local

runnerWorker:
  image: 
    repository: "ghcr.io/hatchet-dev/hatchet/hatchet-runner-worker"
    tag: "v0.1.0-alpha.1"
    pullPolicy: "IfNotPresent"
  env: {}
  resources:
    limits:
      memory: 1024Mi
    requests:
      cpu: 250m
      memory: 1024Mi
  commandline:
    args: [
      "--config",
      "/hatchet/data/config/generated",
    ]

commandline:
  args: [
    "--config",
    "/hatchet/data/config/generated",
  ]

retainFailedHooks: false

env: {}

files: {}

deployment:
  annotations: {}
  labels: {}

persistence:
  size: 5Gi

service:
  type: ClusterIP
  externalPort: 8080
  internalPort: 8080
  internalTemporalPort: 7223

  # externalIPs:
  # - 192.168.0.1
  #
  ## LoadBalancer IP if service.type is LoadBalancer
  # loadBalancerIP: 10.2.2.2
  annotations: {}
  labels: {}
  ## Limit load balancer source ips to list of CIDRs (where available)
  # loadBalancerSourceRanges: []
  selector: {}
  # portName: service-port

ingress:
  enabled: true
  # For k8s 1.18+
  # ingressClassName:
  labels: {}
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  # - host: hatchet.example.com
  #   paths:
  #     - path: /
  tls:
  # - secretName: hatchet.example.com
  #   hosts:
  #     - hatchet.example.com
  # servicePort: service-port
  pathType: ImplementationSpecific

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # If set and create is false, the service account must be existing
  name:
  annotations: {}

extraContainers: []

extraVolumeMounts: []

extraVolumes: []

resources:
  limits:
    memory: 1024Mi
  requests:
    cpu: 250m
    memory: 1024Mi

priorityClassName: ""

# Affinity for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# affinity: {}

# Tolerations for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Common annotations for all pods (backend and job runner).
podAnnotations: {}

# Increasing replica count will deploy a separate pod for backend and jobs
# Example: with 3 replicas, you will end up with 3 backends + 1 jobs pod
replicaCount: 1
revisionHistoryLimit: 3

# podDisruptionBudget:
#   maxUnavailable: 1

persistentVolumeClaim:
  # set to true to use pvc
  enabled: false
  # set to true to use you own pvc
  existingClaim: false
  annotations: {}

  accessModes:
    - ReadWriteOnce
  size: "15Gi"
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

# default security context
securityContext:
  enabled: false
  allowPrivilegeEscalation: false
  runAsUser: 1000
  fsGroup: 2000

extraConfigMapMounts: []

initContainers: []

extraManifests: []

# Support for AWS Security groups for pods
# Ref: https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html
securityGroupPolicy:
  enabled: false
  groupIds: []
